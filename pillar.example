# -*- coding: utf-8 -*-
# vim: ft=yaml
# yamllint disable rule:comments-indentation
---
sonarr:
  install:
      # Install rootless containers running as dedicated user.
    rootless: true
      # When applying `clean` states, also remove application data.
      # Setting this to true might incur accidental data loss!
    remove_all_data_for_sure: false
  config:
      # This configuration is saved by Sonarr inside the config.xml file
      # and relates to basic application configuration.
      # More detailed configuration is found inside `sonarr.db` sqlite db.
      # @TODO manage that somewhat
    general:
      AnalyticsEnabled: false
      # BindAddress: *
      # Port: 8989
      # EnableSsl: false
      # LaunchBrowser: true
      # ApiKey: null
      # AuthenticationEnabled: false
      # AuthenticationMethod: null
      # Branch: main
      # LogLevel: info
      # ConsoleLogLevel: ''
      # SslCertHash: null
      # UrlBase: ''
          # has to start or end with Sonarr to work afaict
      # InstanceName: null
      # UpdateAutomatically: false
      # UpdateMechanism: null
      # UpdateScriptPath: ''
      # SyslogServer: ''
      # SyslogPort: 514
      # SyslogLevel: null # defaults to loglevel

  container:
    host_port: 5048
      # These influence the linuxserver image-based container process UID/GID.
      # When userns_keep_id is in use, pgid should be the same as the dedicated
      # media group which owns the data. This formula syncs them automatically,
      # so you should leave it unset.
    pgid: null
    puid: null
    tz: Etc/UTC
      # This maps the UID/GID of the user running the container to the same ones
      # inside it. This allows to run the container process unprivileged, but
      # still e.g. write to network shares with the same permissions as the host
      # user (NFS/SMB do not know about host user namespaces of course).
      # (see also comment on lookup:media_group)
      # This is only allowed for rootless containers.
    userns_keep_id: true

    # These paths will be mounted and added as root folders.
    # See lookup.paths.misc for mounts that will not be added as such.
  mount_paths: []

  lookup:
    rootgroup: root
    compose:
      create_pod: null
      pod_args: null
      project_name: sonarr
      remove_orphans: true
      service:
        container_prefix: null
        ephemeral: true
        pod_prefix: null
        restart_policy: on-failure
        restart_sec: 2
        separator: null
        stop_timeout: null
    paths:
      base: /opt/containers/sonarr
      compose: docker-compose.yml
      config_sonarr: sonarr.env
      data: data
      misc: []
    user:
      groups: []
      home: null
      name: sonarr
      shell: /usr/sbin/nologin
      uid: null
      gid: null
    containers:
      sonarr:
        image: ghcr.io/linuxserver/sonarr:latest
      # This formula generally assumes Sonarr needs to work with other programs
      # on the same data, thus the dedicated media group. The data should
      # be owned by this group and have group rw permissions set.
      # This is especially needed when two or more rootless containers are running
      # on the same host and need access to the same data. This might be superfluous
      # once rootless network share mounting is easily possible.
    media_group:
        # Set this to something falsey to disable media group creation.
      gid: 3414
      name: mediarr

  tofs:
      # The files_switch key serves as a selector for alternative
      # directories under the formula files directory. See TOFS pattern
      # doc for more info.
      # Note: Any value not evaluated by `config.get` will be used literally.
      # This can be used to set custom paths, as many levels deep as required.
    files_switch:
      - any/path/can/be/used/here
      - id
      - roles
      - osfinger
      - os
      - os_family

      # All aspects of path/file resolution are customisable using the options below.
      # This is unnecessary in most cases; there are sensible defaults.
      # Default path: salt://< path_prefix >/< dirs.files >/< dirs.default >
      # I.e.: salt://sonarr/files/default
      # path_prefix: template_alt
      # dirs:
      #   files: files_alt
      #   default: default_alt
      # The entries under `source_files` are prepended to the default source files
      # given for the state
    source_files:
      Sonarr compose file is managed:
        - docker-compose_alt.yml
        - docker-compose_alt.yml.j2
      sonarr environment file is managed:
        - sonarr_alt.env
        - sonarr_alt.env.j2
